#!/usr/bin/env node
/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('woogie-back:server');
const http = require('http');
const adminModule = require('../admin/admin-db/admin-db');
const config = require('config')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.get('port'));
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Listen on provided port, on all network interfaces.
 */

let myServer = server.listen(port, () => {console.log('Listening on port ' + port)});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    console.log("Server closed")
    adminModule.deleteAllTables().then( (res) => { // close your database connection and exit with success
      console.log(res);
    });
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  await adminModule.createAllTables();
  await adminModule.mockupAllTables();
}

const sigs = ['SIGINT', 'SIGTERM', 'SIGQUIT']
sigs.forEach(sig => {
  process.on(sig, () => {
    server.close(function (err) { // Stops the server from accepting new connections and finishes existing connections.
      console.log("Server closed")
      adminModule.deleteAllTables().then( (res) => { // close your database connection and exit with success
        console.log(res);
        process.exit(0);
      });
    })
  })
})

module.exports = myServer;
